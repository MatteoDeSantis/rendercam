
-- Manage buttons for switching to different test scenes, running tests, etc.

local rendercam = require "rendercam 2.rendercam"

local profilerIsEnabled = false

local scenes = {
	{ text = "run unit tests"},
	{ text = "run perf. tests"},
	{ text = "bounds"},
}

local BUTTON_NODE_KEY = hash("button")
local BUTTON_TEXT_NODE_KEY = hash("text")
local BUTTON_SHORTCUT_NODE_KEY = hash("shortcut")

local BODY_COLOR_NORMAL = vmath.vector4(0.4, 0.4, 0.4, 1)
local BODY_COLOR_HOVERED = vmath.vector4(0.5, 0.5, 0.5, 1)
local BODY_COLOR_PRESSED = vmath.vector4(0.2, 0.2, 0.2, 1)

local buttonBaseX = 75
local buttonBaseY = rendercam.configH/2
local winCenterX = rendercam.configW/2
local buttonSpacingX = 125

local function getShortcut(i)
	return tostring(i)
end

local function getButtonPos(i)
	local pos = vmath.vector3(buttonBaseX, buttonBaseY, 0)
	pos.x = pos.x + (i-1) * buttonSpacingX
	return pos
end

local function makeButton(bodyNode, textNode, text)
	local b = {
		bodyNode = bodyNode, textNode = textNode,
		text = text,
		isHovered = false, isPressed = false
	}
	return b
end

local function activateButton(btnData)
	print(btnData.text, "activated")
end

function init(self)
	msg.post(".", "acquire_input_focus")

	local protoBtn = gui.get_node("button")

	self.buttons = {}
	self.shortcuts = {}
	self.hoveredBtn = nil
	self.pressedBtn = nil

	for i,data in ipairs(scenes) do
		local nodes = gui.clone_tree(protoBtn)
		local bodyNode = nodes[BUTTON_NODE_KEY]
		local textNode = nodes[BUTTON_TEXT_NODE_KEY]
		gui.set_text(textNode, data.text)
		gui.set_position(bodyNode, getButtonPos(i))
		gui.set_color(bodyNode, BODY_COLOR_NORMAL)

		local shortcutNode = nodes[BUTTON_SHORTCUT_NODE_KEY]
		local shortcutName = getShortcut(i)
		local shortcutAction = hash(shortcutName)
		self.shortcuts[shortcutAction] = i
		gui.set_text(shortcutNode, shortcutName)

		local btn = makeButton(bodyNode, textNode, data.text)
		table.insert(self.buttons, btn)
	end

	gui.set_enabled(protoBtn, false)

	local topLine = gui.get_node("line top")
	local botLine = gui.get_node("line bottom")
	local bg = gui.get_node("buttons background")
	local pos = vmath.vector3(winCenterX, buttonBaseY, 0)
	gui.set_position(bg, pos)
	pos.y = buttonBaseY + 50
	gui.set_position(topLine, pos)
	pos.y = buttonBaseY - 50
	gui.set_position(botLine, pos)
end

function on_message(self, message_id, message, sender)
end

local function pressButton(btnData)
	btnData.isPressed = true
	gui.set_color(btnData.bodyNode, BODY_COLOR_PRESSED)
end

local function releaseButton(btnData)
	btnData.isPressed = false
	local color = btnData.isHovered and BODY_COLOR_HOVERED or BODY_COLOR_NORMAL
	gui.set_color(btnData.bodyNode, color)
	activateButton(btnData)
end

function on_input(self, action_id, action)
	if not action_id then
		self.hoveredBtn = nil
		for i,btnData in ipairs(self.buttons) do
			local hit = gui.pick_node(btnData.bodyNode, action.x, action.y)
			if hit then
				self.hoveredBtn = btnData
				if not btnData.isHovered then
					btnData.isHovered = true
					gui.set_color(btnData.bodyNode, BODY_COLOR_HOVERED)
				end
			else
				if btnData.isPressed then
					self.pressedBtn = nil
					btnData.isPressed = false
				end
				if btnData.isHovered then
					btnData.isHovered = false
					gui.set_color(btnData.bodyNode, BODY_COLOR_NORMAL)
				end
			end
		end
	elseif action_id == hash("left click") then
		if action.pressed then
			if self.hoveredBtn then
				self.pressedBtn = self.hoveredBtn
				pressButton(self.pressedBtn)
			end
		elseif action.released then
			if self.pressedBtn then
				releaseButton(self.pressedBtn)
				self.pressedBtn = nil
			end
		end
	elseif action_id == hash("toggle profiler") and action.pressed then
		profilerIsEnabled = not profilerIsEnabled
		profiler.enable_ui(profilerIsEnabled)
	elseif self.shortcuts[action_id] then
		local btnIndex = self.shortcuts[action_id]
		local btnData = self.buttons[btnIndex]
		if action.pressed then
			pressButton(btnData)
		elseif action.released then
			releaseButton(btnData)
		end
	end
end
