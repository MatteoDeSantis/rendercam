
-- Manage buttons for switching to different test scenes, running tests, etc.

local rendercam = require "rendercam 2.rendercam"
local ButtonGroup = require "main.ButtonGroup"

local profilerIsEnabled = false

local scenes = require "main.scenes"
local LOADER_URL = msg.url("main:/proxies#loader")
local REENABLED = hash("reenabled")

local buttonWidth = 100
local endPadding = 50
local maxButtonCount = 10

local buttonBaseX = endPadding + buttonWidth/2
local winW, winH = rendercam.configW, rendercam.configH
local buttonBaseY = winH/2
local winCenterX = winW/2
local freeSpace = winW - endPadding * 2 - maxButtonCount * buttonWidth
local interPadding = freeSpace / (maxButtonCount - 1)
local buttonSpacing = buttonWidth + interPadding

local function getButtonPos(i)
	local pos = vmath.vector3(buttonBaseX, buttonBaseY, 0)
	pos.x = pos.x + (i-1) * buttonSpacing
	return pos
end

local function dummyButtonCallback(button, self)
	print(button.text, "activated", self)
end

local buttonCallbacks = {
	-- openChildren, backToMain, back, prevPage, nextPage, loadScene, runModuleFunc,
}

local function deepCopy(t)
	local t2 = {}
	for k,v in pairs(t) do
		if type(v) == "table" then
			t2[k] = deepCopy(v)
		else
			t2[k] = v
		end
	end
	return t2
end

local function loadButtons(self, btnSpecs)
	assert(#btnSpecs <= maxButtonCount, "main.gui-loadButtons: Too many buttons spawned! :"..#btnSpecs)
	if self.buttons then  self.buttons:destroy()  end
	local protoBtn = gui.get_node("button")
	gui.set_enabled(protoBtn, true)
	self.buttons = ButtonGroup(protoBtn)

	for i,data in ipairs(btnSpecs) do
		local text, callback, args = unpack(data)
		args = args and deepCopy(args) or {} -- Don't modify the original list if it exists.
		table.insert(args, 1, self)
		callback = buttonCallbacks[callback] or dummyButtonCallback
		local shortcut = i % maxButtonCount
		self.buttons:newButton(text, getButtonPos(i), shortcut, callback, args)
	end
	gui.set_enabled(protoBtn, false)
end

local BACK_BUTTON_SPECS = { "Back", "back" }
local PREV_BUTTON_SPECS = { "Previous Page", "prevPage" }
local NEXT_BUTTON_SPECS = { "Next Page", "nextPage" }

local function loadPage(self, allItems, startI)
	self.page.startI = startI and math.max(1, startI) or 1
	local remainingItemCount = #allItems - (self.page.startI - 1)
	if remainingItemCount <= (maxButtonCount - 1) then -- No Next button needed.
		self.page.endI = #allItems
	else
		self.page.endI = (self.page.startI - 1) + (maxButtonCount - 2) -- Next & Prev buttons.
	end
	local items = {}
	local backBtn = self.page.startI == 1 and BACK_BUTTON_SPECS or PREV_BUTTON_SPECS
	table.insert(items, backBtn)
	for i=self.page.startI,self.page.endI do
		table.insert(items, allItems[i])
	end
	if self.page.endI < #allItems then
		table.insert(items, NEXT_BUTTON_SPECS)
	end
	loadButtons(self, items)
end

function buttonCallbacks.nextPage(button, self)
	self.page.num = self.page.num + 1
	local allItems = self.menuItemHistory[#self.menuItemHistory]
	loadPage(self, allItems, self.page.endI + 1)
end

function buttonCallbacks.prevPage(button, self)
	self.page.num = self.page.num - 1
	local allItems = self.menuItemHistory[#self.menuItemHistory]
	loadPage(self, allItems, self.page.startI - (maxButtonCount - 2))
end

function buttonCallbacks.back(button, self)
	table.remove(self.menuItemHistory)
	local allItems = self.menuItemHistory[#self.menuItemHistory]
	loadButtons(self, allItems)
end

function buttonCallbacks.openChildren(button, self, ...)
	local items = {...}
	loadPage(self, items)
	table.insert(self.menuItemHistory, items) -- Last == latest (use unmodified list).
end

function buttonCallbacks.loadScene(button, self, sceneName)
	msg.post(LOADER_URL, "load scene", {scene = sceneName})
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.page = { num = 1 } -- { startI, endI, num }
	self.menuItemHistory = { scenes }
	loadButtons(self, scenes)

	local topLine = gui.get_node("line top")
	local botLine = gui.get_node("line bottom")
	local bg = gui.get_node("buttons background")
	local pos = vmath.vector3(winCenterX, buttonBaseY, 0)
	gui.set_position(bg, pos)
	pos.y = buttonBaseY + 50
	gui.set_position(topLine, pos)
	pos.y = buttonBaseY - 50
	gui.set_position(botLine, pos)
end

function on_input(self, action_id, action)
	self.buttons:input(action_id, action)
	if action_id == hash("toggle profiler") and action.pressed then
		profilerIsEnabled = not profilerIsEnabled
		profiler.enable_ui(profilerIsEnabled)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == REENABLED then -- From main_loader.
		msg.post("camera", "enable")
	end
end
