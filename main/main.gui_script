
-- Manage buttons for switching to different test scenes, running tests, etc.

local scenes = {
	{ text = "run unit tests"},
	{ text = "run perf. tests"},
	{ text = "bounds"}
}

local BUTTON_NODE_KEY = hash("button")
local BUTTON_TEXT_NODE_KEY = hash("text")

local BODY_COLOR_NORMAL = vmath.vector4(0.4, 0.4, 0.4, 1)
local BODY_COLOR_HOVERED = vmath.vector4(0.5, 0.5, 0.5, 1)
local BODY_COLOR_PRESSED = vmath.vector4(0.2, 0.2, 0.2, 1)

local function getButtonPos(i)
	local pos = vmath.vector3(75, 50, 0)
	pos.x = pos.x + (i-1) * 125
	return pos
end

local function makeButton(bodyNode, textNode, text)
	local b = {
		bodyNode = bodyNode, textNode = textNode,
		text = text,
		isHovered = false, isPressed = false
	}
	return b
end

function init(self)
	msg.post(".", "acquire_input_focus")

	local protoBtn = gui.get_node("button")

	self.buttons = {}
	self.hoveredBtn = nil
	self.pressedBtn = nil

	for i,data in ipairs(scenes) do
		local nodes = gui.clone_tree(protoBtn)
		local bodyNode = nodes[BUTTON_NODE_KEY]
		local textNode = nodes[BUTTON_TEXT_NODE_KEY]
		gui.set_text(textNode, data.text)
		gui.set_position(bodyNode, getButtonPos(i))
		gui.set_color(bodyNode, BODY_COLOR_NORMAL)
		local btn = makeButton(bodyNode, textNode, data.text)
		table.insert(self.buttons, btn)
	end

	gui.set_enabled(protoBtn, false)
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	if not action_id then
		self.hoveredBtn = nil
		for i,btnData in ipairs(self.buttons) do
			local hit = gui.pick_node(btnData.bodyNode, action.x, action.y)
			if hit then
				self.hoveredBtn = btnData
				if not btnData.isHovered then
					btnData.isHovered = true
					gui.set_color(btnData.bodyNode, BODY_COLOR_HOVERED)
				end
			else
				if btnData.isPressed then
					self.pressedBtn = nil
					btnData.isPressed = false
				end
				if btnData.isHovered then
					btnData.isHovered = false
					gui.set_color(btnData.bodyNode, BODY_COLOR_NORMAL)
				end
			end
		end
	elseif action_id == hash("left click") then
		if action.pressed then
			if self.hoveredBtn then
				self.pressedBtn = self.hoveredBtn
				self.pressedBtn.isPressed = true
				gui.set_color(self.pressedBtn.bodyNode, BODY_COLOR_PRESSED)
			end
		elseif action.released then
			if self.pressedBtn then
				gui.set_color(self.pressedBtn.bodyNode, BODY_COLOR_HOVERED)
				self.pressedBtn.isPressed = false
				print(self.pressedBtn.text, "activated")
				self.pressedBtn = nil
			end
		end
	end
end
