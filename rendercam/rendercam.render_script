
local rendercam = require "rendercam.rendercam"

local CLEAR_COLOR = hash("clear_color")
local WINDOW_RESIZED = hash("window_resized")

local IDENTITY_MATRIX = vmath.matrix4()

function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.model_pred = render.predicate({"model"})
	self.particle_pred = render.predicate({"particle"})

	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	self.win_w, self.win_h = render.get_width(), render.get_height()
	self.gui_projection = vmath.matrix4_orthographic(0, self.win_w, 0, self.win_h, -1, 1)

	self.buffers_to_clear = {
		[render.BUFFER_COLOR_BIT] = self.clear_color,
		[render.BUFFER_DEPTH_BIT] = 1,
		[render.BUFFER_STENCIL_BIT] = 0
	}
end

function update(self, dt)
	rendercam.update_camera_transforms()

	render.clear(self.buffers_to_clear)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

	local cam = rendercam.current
	if cam then
		cam:apply()
		render.draw(self.tile_pred)
	end
	-- Debug rendering - physics debug, draw_line. --NOT draw_debug_text - that's in the "text" predicate.
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_CULL_FACE)
	render.draw_debug3d()

	-- Gui Rendering
	render.set_viewport(0, 0, self.win_w, self.win_h)
	render.set_view(IDENTITY_MATRIX)
	render.set_projection(self.gui_projection)

	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.draw(self.text_pred) -- Includes debug text from "draw_debug_text" messages.
	render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message, sender)
	if message_id == WINDOW_RESIZED then
		rendercam.window_resized(message.width, message.height, self.win_w, self.win_h)
		self.win_w, self.win_h = message.width, message.height
		self.gui_projection = vmath.matrix4_orthographic(0, self.win_w, 0, self.win_h, -1, 1)
	elseif message_id == CLEAR_COLOR then
		self.clear_color = message.color
		self.buffers_to_clear[render.BUFFER_COLOR_BIT] = self.clear_color
	end
end
